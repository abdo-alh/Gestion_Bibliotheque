<?php

namespace App\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\Routing\Annotation\Route;
use App\Form\RegisterType;
use App\Entity\User;
use Doctrine\Common\Persistence\ObjectManager;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Security\Core\Encoder\UserPasswordEncoderInterface;
use App\Repository\UserRepository;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Security;
use Symfony\Component\HttpKernel\Event\FilterResponseEvent;

class routecontroller extends AbstractController
{



    public function onKernelResponse(FilterResponseEvent $event)
    {
        $response = $event->getResponse();

        $response->headers->addCacheControlDirective('no-cache', true);
        $response->headers->addCacheControlDirective('max-age', 0);
        $response->headers->addCacheControlDirective('must-revalidate', true);
        $response->headers->addCacheControlDirective('no-store', true);
    }



    /**
     * @Route("/customer_account", name="security_login")
     */
     public function customer_account()
    {


        return $this->render('customer-account.html.twig', [
            'controller_name' => 'routecontroller'
        ]);
}




    /**
     * @Route("/deconnexion", name="logout")
     */
     public function logout()
     {

     }

    /**
     * @Route("/store_pages", name="store_pages")
     */
    public function store_pages()
    {

        return $this->render('store Pages.html.twig', [
            'controller_name' => 'routecontroller'
        ]);
    }





/**
     * @Route("/inscription", name="inscription")
     */
     public function inscription(Request $request,ObjectManager $manager,UserPasswordEncoderInterface $encoder)
    {

$user =new User();
      $form = $this->createForm(RegisterType::class,$user);
      $form->handleRequest($request);
      if($form->isSubmitted()&& $form->isValid())
      {

        $file=$form->get('image')->getData();
                        $fileName = $this->generateUniqueFileName().'.'.$file->guessExtension();
                     try {
                            $file->move(
                            $this->getParameter('image_directory'),
                            $fileName 
                        );
                            } catch (FileException $e) {
                            // ... handle exception if something happens during file upload
                         }            
                       $user->setImage($fileName);
                       $user->setRoles(['ROLE_USER']);
                      // $user->setUsername('');


        $hash = $encoder->encodePassword($user, $user->getPassword());
        $user->setPassword($hash);
        $manager->persist($user);
        $manager->flush();
        return $this->redirectToRoute('security_login');

    }

        return $this->render('inscription/index.html.twig', [
            'controller_name' => 'routecontroller','form'=>$form->createView()
        ]);
}

/**
* @return string
*/
private function generateUniqueFileName()
{
// md5() reduces the similarity of the file names generated by
// uniqid(), which is based on timestamps
return md5(uniqid());
}



    /**
     * @Route(path = "/admin/user/activer", name = "activer")
     * @Security("has_role('ROLE_ADMIN')")
     */
    public function activer(Request $request)
    {
        // change the properties of the given entity and save the changes
        $em = $this->getDoctrine()->getManager();
        $repository = $this->getDoctrine()->getRepository(User::class);

        $id = $request->query->get('id');
        $user = $repository->find($id);
        $user->setRoles([0=>'ROLE_USER',1=>'ROLE_ADMIN']);
        $em->flush();

        // redirect to the 'list' view of the given entity ...
     /*   return $this->redirectToRoute('easyadmin', array(
            'action' => 'list',
            'entity' => $this->request->query->get('User'),
        ));

}*/
return $this->redirectToRoute('easyadmin', ['entity' => 'User']);

    }


##dashboard



    /**
     * @Route("/my_dashboard", name="my_dashboard")
     */
    public function my_dashboard()
    {

        return $this->render('my-dashboard.html.twig', [
            'controller_name' => 'routecontroller',
        ]);
    }




/**
     * @Route("/edit_my_profile", name="edit_my_profile")
     */
     public function edit_my_profile(Request $request,ObjectManager $manager,UserPasswordEncoderInterface $encoder)
    {

$user =new User();
$user = $this->getUser();
      $form = $this->createForm(RegisterType::class,$user);
      $form->handleRequest($request);
      if($form->isSubmitted()&& $form->isValid())
      {

        $file=$form->get('image')->getData();
                        $fileName = $this->generateUniqueFileName().'.'.$file->guessExtension();
                     try {
                            $file->move(
                            $this->getParameter('image_directory'),
                            $fileName 
                        );
                            } catch (FileException $e) {
                            // ... handle exception if something happens during file upload
                         }            
                       $user->setImage($fileName);

                    /*   if($this->get('security.authorization_checker')->isGranted('ROLE_ADMIN'))
                       {
                       
                        $user->setRoles([0=>'ROLE_USER',1=>'ROLE_ADMIN']);
                       }*/
                    
                       if(($this->get('security.authorization_checker')->isGranted('ROLE_ADMIN'))and ($this->get('security.authorization_checker')->isGranted('ROLE_USER')))
                       {
                     
                        
                      $user->setRoles([0=>'ROLE_USER',1=>'ROLE_ADMIN']);
                        
                       }elseif($this->get('security.authorization_checker')->isGranted('ROLE_USER'))
                       {
                         $user->setRoles(['ROLE_USER']);
                       }
                  


        $hash = $encoder->encodePassword($user, $user->getPassword());
        $user->setPassword($hash);
/*
$path = $this->container->getParameter('kernel.root_dir') . '/../img/users/logo.png';

$fs = new Filesystem();
$fs->remove($path);
*/
         $this->getDoctrine()->getManager()->flush();
        return $this->redirectToRoute('my_dashboard');

    }

        return $this->render('edit_my_profile.html.twig', [
            'controller_name' => 'routecontroller','form'=>$form->createView()
        ]);
}

}
